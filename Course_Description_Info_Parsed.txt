Core Course Descriptions:
Below is course descriptions for each core class in the software engineering 4 year plan as of 11/7/24
For more information on what semesters these classes are offered for main, online, and distance campus, students should check out the course catalog at https://catalog.arizona.edu/courses 

Math Courses:
MATH 122A Functions for Calculus - Elementary functions, their properties, and uses in modeling.  A graphing calculator is required for this course. We recommend the
TI-83 or TI-84 models. Calculators that perform symbolic manipulations, such as the TI-89, NSpire CAS, or HP50g, cannot be used.
MATH 122B First-Semester Calculus - An introduction to first-semester calculus for engineering, science and math students, from rates of change to integration, with an emphasis on understanding, problem solving, and modeling. Topics covered include key concepts of derivative and definite integral, techniques of differentiation, and applications, using algebraic and transcendental functions.  A graphing calculator is required for this course. We recommend the TI-83 or TI-84 models. Calculators that perform symbolic manipulations, such as the TI-89, NSpire CAS, or HP50g, cannot be used. Examinations are proctored. Except as per University policy on repeating a course, credit will not be given for this course if the student has credit in a higher level math course. Such students may be dropped from the course.
MATH 125 Calculus I - An accelerated version of MATH 122B. Introduction to calculus with an emphasis on understanding and problem solving. Concepts are presented graphically and numerically as well as algebraically. Elementary functions, their properties and uses in modeling; the key concepts of derivative and definite integral; techniques of differentiation, using the derivative to understand the behavior of functions; applications to optimization problems in physics, biology and economics. A graphing calculator is required for this course. We recommend the TI-83 or TI-84 models. Calculators that perform symbolic manipulations, such as the TI-89, NSpire CAS, or HP50g, cannot be used. Except as per University policy on repeating a course, credit will not be given for this course if the student has credit in a higher level math course. Such students may be dropped from the course. Examinations are proctored.
MATH 129 Calculus II - Continuation of MATH 122B or MATH 125. Techniques of symbolic and numerical integration, applications of the definite integral to geometry, physics, economics, and probability; differential equations from a numerical, graphical, and algebraic point of view; modeling using differential equations, approximations by Taylor series. A graphing calculator is required for this course.  We recommend the TI-83 or TI-84 models. Calculators that perform symbolic manipulations, such as the TI-89, NSpire CAS, or HP50g, cannot be used. Examinations are proctored.
MATH 243 Discrete Mathematics in Computer Science - Set theory, logic, discrete structures; induction and recursion; graphs and networks; techniques of proof. Examinations are proctored.

Science Courses:
CHEM 151 Chemical Thinking I - Integrated lecture-lab course designed to develop a basic understanding of central ways of knowing, thinking, and acting in chemistry that are useful to explain and predict the physical and chemical properties of chemical substances in real-world systems. Additionally, students participate in experimental activities that promote the development of fundamental science and engineering practices.
CHEM 161 Honors Chemical Thinking I - This Honors version of Chemical Thinking is designed to help students develop a basic understanding of central ways of knowing, thinking ,and acting in chemistry that are useful to explain and predict the physical and chemical properties of chemical substances in real-world systems. Additionally, students participate in experimental activities that promote the development of fundamental science and engineering practices. As an Honors course, students will go deeper into the concepts, explore the scientific literature, and use it to think about the costs and benefits of the decision's humans make to diversify and control matter and energy.
CHEM 163 Honors Fundamental Techniques of Chemistry - Advanced techniques in college chemistry; measurements, separations; identification; purification and analysis of organic and inorganic substances.
CHEM 152 Chemical Thinking II - Integrated lecture-lab course designed to develop a basic understanding of central ways of knowing, thinking, and acting in chemistry that are useful to explain, predict, and control the extent and rate of chemical processes in real-world systems. Additionally, students participate in experimental activities that promote the development of fundamental science and engineering practices.
CHEM 162 Honors Chemical Thinking II - 	This Honors version of Chemical Thinking is designed to help students develop a basic understanding of central ways of knowing, thinking, and acting in chemistry that are useful to explain, predict, and control the extent and rate of chemical processes in real-world systems. Additionally, students participate in exploratory activities that promote the development of fundamental science and engineering practices. As an Honors course, students will go deeper into the concepts, explore the scientific literature, and use it to think about the costs and benefits of the decision's humans make to diversify and control matter and energy.
CHEM 164 Honors Fundamental Techniques of Chemistry - Advanced techniques in college chemistry; measurements, separations; identification; purification and analysis of organic and inorganic substances. Lab stresses individual studies and library research.
MSE 110 Solid State Chemistry - Fundamental principles of the chemistry of condensed states of matter including metals, polymers, molecular solids and ceramics.
MCB 181R Introduction to Molecular and Cellular Biology - Introduction to Molecular and Cellular Biology covers biological function at the molecular level, with a focus on the structure and regulation of genes, the structure and synthesis of proteins, how these molecules are integrated into cells, and how these cells are integrated into multicellular systems Students will explore how life scientists collect, use, analyze and interpret data about biological processes. Examples stem from current research on viruses, bacteria, plants, and animals (including humans) in the areas of cell biology, genetics, and molecular medicine.
MCB 181L Introductory Biology Laboratory I - Laboratory exercises presenting techniques and fundamental principles of modern biology.
PHYS 141 Introductory Mechanics - A first course in Newtonian mechanics; introduces freshman-level students to the statics and dynamics of point particles, rigid bodies, and fluids. Topics include vector algebra, projectile and circular motion, Newton's Laws, conservation of energy, collisions and conservation of momentum, rotational dynamics and conservation of angular momentum, statics, harmonic oscillators and pendulums, gravitation and Kepler's Laws, fluid statics and dynamics.
PHYS 161H Accelerated Introductory Mechanics - A freshman-level course in Newtonian mechanics, taught at an accelerated level; introduces freshman-level students to the statics and dynamics of point particles, rigid bodies, and fluids. Topics include vector algebra, projectile and circular motion, Newton's Laws, conservation of energy, collisions and conservation of momentum, rotational dynamics and conservation of angular momentum, statics, harmonic oscillators and pendulums, gravitation and Kepler's Laws, fluid statics and dynamics. This course, Accelerated Introductory Mechanics, is meant for Astronomy, Physics, and Applied Physics majors.
PHYS 241 Introductory Electricity and Magnetism - A first course in electromagnetic fields and their applications. Coulomb's and Gauss' Law, electric fields and potentials, electrical and magnetic properties of matter, Ampere's and Faraday's laws, elementary DC and AC circuits, Maxwell's equations.
PHYS 261H Accelerated Introductory Electricity and Magnetism - A first course in electromagnetic fields and their applications. Coulomb's and Gauss' Law, electric fields and potentials, electrical and magnetic properties of matter, Ampere's and Faraday's laws, elementary DC and AC circuits, Maxwell's equations. Methods of vector calculus are used extensively. This course, Accelerated Introductory Electricity and Magnetism, is meant for Astronomy, Physics, and Applied Physics majors.

English Courses:
ENGL 101 First-Year Composition - Emphasizes genre, rhetorical situation, and discourse communities.
ENGL 107 Foundations Writing for English as an Additional Language Students - English 101/107 familiarizes students with the social and situated nature of writing--that is, with the ways in which writing is tied to purpose, audience/community, and topic/content. As such, there is a heavy emphasis on community, genre, and rhetorical situation. Through informal and formal writing, students will write in several genres, analyzing how purpose, audience, and context shape research, strategies for organization, and language usage, components that will be developed further in the second semester class. In addition, the course introduces practices of research inquiry in writing. Reflection on students' writing is also formally built into the entire course, culminating in a final portfolio.
ENGL 109H Advanced First-Year Composition - Emphasizes academic research writing, argumentation, rhetorical awareness, and genre.
ENGL 102 First-Year Composition - English 102 teaches rhetoric and research across contexts.
ENGL 108 Foundations Writing for English as an Additional Language Students - English 102/108 emphasizes rhetoric and research across contexts. Through reading and discussion of content, students engage in rhetorical analysis, research, persuasion, reflection, and revision. It is designed to help students recognize and learn to write for a variety of rhetorical situations, including different audiences, purposes, contexts, and genres. Students will conduct research inquiries, find and evaluate sources, and make critically aware decisions about how best to achieve their purposes. Further, it helps students become aware of their own writing processes and adjust them to whatever demands a particular writing situation places on them.

Electrical and Computer Engineering Courses:
ECE 101 Programming I - ECE 101 is an introduction to the basic principles of programming and the C programming language. It introduces students to fundamental software design principles and commonly used techniques to solve computational problems. The course provides principal knowledge in programming concepts such as program flow control, memory management, and elementary data structures. This course also prepares students for more advanced programming courses.
ECE 175 Computer Programming for Engineering Applications - Fundamentals of C, complexity and efficiency analysis, numerical precision and representations, intro to data structures, structured program design, application to solving engineering problems.
ECE 201 Programming II - ECE 201 focuses on fundamental concepts of Object-Oriented Programming and data abstraction. Topics include classes, encapsulation, inheritance, polymorphism, exceptions, abstract data types, linked lists, stacks, queues, and binary trees, using the C++ programming language. The course also introduces the concepts of algorithmic complexity and examines basic algorithms such as traversal, searching, and sorting in data structures such as linked lists, stacks, queues, and binary trees.
ECE 275 Computer Programming for Engineering Applications II - C and C++ programming. Core design and analysis of engineering algorithms and structures including lists, trees, graphs, traversal, and encoding. Fundamentals of C and C++ programming languages including pointers, structures, unions, and introduction to classes. Programming design topics including memory management, abstraction and design of advanced structures, and basics of software engineering.
ECE 274A Digital Logic - Number systems and coding, logic design, sequential systems, register transfer language.
ECE 369A Fundamentals of Computer Organization - Computer architecture is the science and art of selecting and interconnecting hardware components to create a computer that meets functional, performance and cost goals. This course qualitatively and quantitatively examines computer design trade-offs, teaches the fundamentals of computer architecture and organization, including CPU, memory, registers, arithmetic unit, control unit, and input/output components. Topics include reduced instruction set computer architectures (RISC), using the MIPS central processor as an example, interface between assembly and high level programming constructs and hardware, instruction and memory cache systems, performance evaluation, benchmarks, and use of the SPIM/WinDLX/Verilog Simulators for the MIPS architecture. ECE 369A serves students two ways. For those who will continue in computer architecture, it lays foundation of state-of-the-art techniques implemented in current and future high-performance computing platforms. For those students not continuing in computer architecture, it gives an overview of the kind of techniques used in today's microprocessors.
ECE 311 Engineering Ethics and Contemporary Issues - This one (1) credit course is required of all Electrical and Computer Engineering students. No specific prior classes or prerequisites are assumed. The course is an introductory exposition of ethics and its principles in the engineering profession, and discussion of contemporary issues that stem from the impact of high technology on our daily lives.  Nowadays, engineered systems are ubiquitous in almost all realms of our activity and therefore it is of paramount importance to be cognizant of how design and use of such systems may bring about profound ethical dilemmas and consequences.

Systems and Industrial Engineering Courses:
SIE 277 Object-Oriented Modeling and Design - Modeling and design of complex systems using all views of the Unified Modeling Language (UML). Most effort will be in the problem domain (defining the problem). Some effort will be in the solution domain (producing hardware or software).
SIE 305 Introduction to Engineering Probability and Statistics - Axioms of probability, discrete and continuous distributions, sampling distributions. Engineering applications of statistical estimation, hypothesis testing, confidence intervals.

Computer Science Courses:
CSC 355 Discrete Structures and Basic Algorithms - Introduction to and analysis of algorithms and characteristics of discrete structures. Course topics include algorithm analysis, discrete data structures, sorting, hashing, search structures, basic design techniques (divide-and-conquer, dynamic programming, and greed) and graph algorithms.
CSC 345 Analysis of Discrete Structure - Introduction to and analysis of algorithms and characteristics of discrete structures. Course topics include algorithm analysis techniques, recurrence relations, structural induction, hierarchical structures, graphs, hashing, and sorting.
CSC 252 Computer Organization - Basic machine organization; elementary hardware concepts; CPU internals.  Machine operations and instructions; assembly language concepts and programming.

Engineering Courses (Senior Design):
ENGR 498A Interdisciplinary Capstone - Students work in interdisciplinary teams to solve mostly industry-sponsored real-world design problems using industry-standard design processes. Teaming, design process, conceptual design, detailed design, design proposal. ENGR 498A and ENGR 498B must be taken in consecutive semesters.Offered in the Fall.
ENGR 498B Interdisciplinary Capstone - Students work in interdisciplinary teams to solve mostly industry-sponsored real-world design problems using industry-standard design processes. Construction, testing and evaluation of prototype; design iteration to arrive at a final working system. Major design project. ENGR 498A and ENGR 498B must be taken in consecutive semesters. Offered in the Spring.

Software Engineering Courses:
SFWE 101 Introduction to Software Engineering - This course introduces students to the different software development lifecycle (SDLC) phases used in developing, delivering, and maintaining software products.  Students will also acquire basic software development skills and understand common terminology used in the software engineering profession.  Students will also learn and practice using traditional coding standards/guidelines.  Python software development libraries and debugging tools will be explored and used in projects to familiarize students with basic tasks involved in modifying, building, and testing software.  The course will also lay the foundation for achieving academic and career success in Software Engineering.
SFWE 201 Software Engineering Sophomore Colloquium - This course is a colloquium designed to help students explore different career opportunities for Software Engineering professionals. Students will interact and learn from professional software engineers while exploring various roles that software engineers play in solving real engineering problems. The course helps students determine focus areas within the SFWE degree program related to specific application areas of interest.  Additionally, students will prepare a professional technically focused resume highlighting their skills and experience.  Students will explore strategies on how to secure an internship position in diverse industries prior to completing their BS degrees.
SFWE 301 Software Requirements Analysis and Test - This course will teach students how to derive and develop software requirements that are measurable, testable and lead to a compliant software design and implementation. Using industry best practices and tools, students will learn how to elicit, analyze, specify, and validate functional and non-functional software requirements. Students will develop software requirements models and specifications that capture the customer / user's needs. They will also develop test plans and test procedures used in a formal software acceptance test to validate that the developed product meets its requirements as specified. In doing so, students will learn and use basic Java language constructs to implement specified requirements. Additionally, students will also learn how to establish and maintain a software requirement configuration baseline, and the processes used to incorporate subsequent changes, updates, and enhancements to the software requirements over time.
SFWE 302/405 Software Architecture and Design - At the heart of every well-engineered software system is its software architecture and design. Software architecture deals with the high-level building blocks that represent an underlying software system. These building blocks are the components (units of computation in a system), the connectors (models of the interactions between software components), and the configurations (arrangements of software components and connectors, and the rules that guide their composition).
SFWE 401 Software Assurance and Security - Software plays a vital role in modern life, managing essential services, like the financial systems, social networks, the Internet, and Cyber-Physical Systems, to name a few. Modern software must be bug-free, secure, and function reliably while controlling our critical systems. Software Assurance is the level of confidence in software being free of intentional or accidental vulnerabilities (including flaws, faults, and bugs) inserted at any time during its lifecycle.
SFWE 403 Software Project Managment - This course will teach software engineering students how to plan, track and communicate the status of large-scale software projects to a diverse group of stakeholders.  Using modern traditional and Agile software development methodologies and tools, and emulating a realistic software development project, students will be immersed in the activities used by industry to develop, manage, and monitor the development of a software product throughout the semester.  Students will learn why planning a software project is important, what constitutes a good plan, how to adapt to the unexpected and unknowns that are likely to occur throughout the project development, and how to track and share the status of the project with their team members, other teams, and the customers/business managers.  They will also learn how to monitor and track cost expenditures and compare against allocated budgets.  Along the way, students will learn the importance of identifying risks and how to develop mitigation plans to address those risks, learn the role that software quality plays in project management, and have the opportunity to develop/hone their leadership and team collaboration skills while being part of an Agile team.
SFWE 402 DevSecOps - This course will allow software engineering students to explore key principles of a DevSecOps approach to software development.  Development (Dev) and operations (Ops) is the union of people, process, and technology to continually automate and develop higher quality/more reliable software products faster.  Security (Sec) is integrated into a typical DevOps pipeline to address potential security issues in code as soon as possible in the software development lifecycle.
SFWE 491 Software Preceptor - This course provides the opportunity for software engineering majors to work in engineering courses/labs with students taking ECE 175, ECE 275, SFWE 101, CSC 355, SFWE 301 or other similar courses (any of these courses may be referred to as "host course" in other parts of this syllabus). The students in this course, also known as "preceptors", will help students in a host course set up their software development environments and tools, work on related course projects as defined by the host course instructor, and provide guidance and help with designing, implementing, debugging/integration testing software developed for those projects.